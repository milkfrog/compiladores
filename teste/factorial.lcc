def top_down_factorial(int n, int array) 
{

	if (n < 0) {
		print "Resultado: 0";
		return;
	}
	
	if (n <=1) {
		print "Resultado: 1";
		return;
	}
	
	if (array[n] != 0) {
		print "Resultado: ";
		print array[n];
		return;
	}
	
	int result;
	int previous_n;
	
	previous_n = n - 1;
	result = top_down_factorial(previous_n, array);
	
	array[n] = n * result;
	
	print "Resultado: ";
    print array[n];
	return;	
}

def bottom_up_factorial(int n) 
{
	
	if (n < 0) {
		print "Resultado: 0";
		return;
	}
	
	if (n <= 1) {
		print "Resultado: 1";
		return;
	}
	
	int results;
	results = new int[n+1];
	results[0] = 1;
	results[1] = 1;
	
	int i;
	
	for( i = 2; i <= n; i = i + 1 ) {
		results[i] = i * results[i-1];
	}
	
	print "Resultado: ";
    print results[n];
	return;
}

def factorial(int n) 
{

	if (n < 0) {
		print "Resultado: -1";
		return;
	}
	
	if (n <= 1) {
		print "Resultado: 1";
		return;
	}
	
	int result;
	int previous_factorial;
	int previous_n;
	
	previous_n = n - 1;
	previous_factorial = factorial(previous_n);
	result = n * previous_factorial;
	
	print "Resultado: ";
    print result;
	
	return;
}

def main() 
{
	print " Calculadora de Fatorial ";
	
	int n;
	int array;
	int result;
	int result_top_down;
	int result_bottom_up;
	
	n = 20;
	
	array = new int[n+1];
	
	int i;
	
	for (i = 0; i <= n; i = i + 1) {
		array[i] = 0;
	}
	
	print "---> Fatorial de 20 no algoritmo normal: ";
	result = factorial(n);
	
	print "---> Fatorial de 20 c/ algoritmo top-down: ";
	result_top_down = top_down_factorial(n, array);
	
	print "---> Fatorial de 20 c/ algoritmo bottom-up: ";
	result_bottom_up = bottom_up_factorial(n);
	
	n = 50;
	
	for (i = 0; i <= n; i = i + 1) {
		array[i] = 0;
	}
	
	print "---> Fatorial de 50 no algoritmo normal: ";
	result = factorial(n);
	
	print "---> Fatorial de 50 c/ algoritmo top-down: ";
	result_top_down = top_down_factorial(n, array);
	
	print "---> Fatorial de 50 c/ algoritmo bottom-up: ";
	result_bottom_up = bottom_up_factorial(n);
}