 def divide_left_right_array()
 {  
    int array;
    array = new int[8];
    array[0] = 1; 
    array[1] = 2;
    array[2] = 4;
    array[3] = 3;
    array[4] = 8;
    array[5] = 5;
    array[6] = 6;
    array[7] = 9;
    int len;
    len = 8;

    if (len < 2){
        return;
    }

    int mid;
    mid = len / 2;
    int left_arr;
    left_arr = new int[mid];
    int right_arr;
    int rightArraySize;
    rightArraySize = len - mid;
    right_arr = new int[rightArraySize];
    int k;
    k = 0;
    int i;

    for(i = 0; i < len; i = i + 1)
    {
        if(i < mid)
        {
            left_arr[i] = array[i];
        }
        else
        {
            right_arr[k] = array[i];
            k = k + 1;
        }
    }
}


def bubble_sort() 
{  
    int array;
    array = new int[4];
    array[0] = 1; 
    array[1] = 2;
    array[2] = 4;
    array[3] = 3;
    array[4] = 8;

    int n;
    n = 4;  
    int temp; 
    temp = 0; 
    int i; 
    int j;

    for(i = 0; i < n; i = i + 1)
    {  
        for(j = 1; j < (n-i); j = j + 1)
        {  
            if(array[j-1] > array[j])
            {  
            
                temp = array[j-1];
                array[j-1] = array[j];
                array[j] = temp;
            }  
                    
        }  
    }
}

def sort_from_partition(int array, int low, int high) 
{ 
    array = new int[4];
    array[0] = 1; 
    array[1] = 2;
    array[2] = 4;
    array[3] = 3;
    array[4] = 8;

    if (low < high) 
    { 
       
        int pi;
        int piPlus;
        piPlus = pi + 1;
        int piLess;
        piLess = pi - 1;

        int pivot;
        pivot = array[high];
        int i;
        i = low;
        int j;
        int temp;
        for(j = low; j < high; j = j + 1)
        {
            if (array[j] < pivot)
            {
                temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i = i + 1;
            }
            temp = array[i];
            array[i] = array[high];
            array[high] = temp;
            pi = i;
        }
        
        int recursiveSort1; 
        recursiveSort1 = sort_from_partition(array, low, piLess);
        int recursiveSort2;
        recursiveSort2 = sort_from_partition(array, piPlus, high);
    } 
} 

